"use strict";

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var addDefinedProps = require("./define");

var updateSchemaKeys = addDefinedProps.updateSchemaKeys,
    hooks = addDefinedProps.hooks,
    isEnumerable = addDefinedProps.isEnumerable;

var defineHelpers = require("./define-helpers");

var ObservationRecorder = require("can-observation-recorder");

var canLogDev = require("can-log/dev/dev");

var canReflect = require("can-reflect");

var queues = require("can-queues");

var getSchemaSymbol = Symbol.for("can.getSchema");

function keysForDefinition(definitions) {
  var keys = [];

  for (var prop in definitions) {
    if (isEnumerable(definitions[prop])) {
      keys.push(prop);
    }
  }

  return keys;
}

function _assign(source) {
  queues.batch.start();
  canReflect.assignMap(this, source || {});
  queues.batch.stop();
}

function _update(source) {
  queues.batch.start();

  if (canReflect.isListLike(source)) {
    canReflect.updateList(this, source);
  } else {
    canReflect.updateMap(this, source || {});
  }

  queues.batch.stop();
}

function _assignDeep(source) {
  queues.batch.start(); // TODO: we should probably just throw an error instead of cleaning

  canReflect.assignDeepMap(this, source || {});
  queues.batch.stop();
}

function _updateDeep(source) {
  queues.batch.start();

  if (canReflect.isListLike(source)) {
    canReflect.updateDeepList(this, source);
  } else {
    // TODO: we should probably just throw an error instead of cleaning
    canReflect.updateDeepMap(this, source || {});
  }

  queues.batch.stop();
}

function setKeyValue(key, value) {
  var defined = defineHelpers.defineExpando(this, key, value);

  if (!defined) {
    this[key] = value;
  }
}

function getKeyValue(key) {
  var value = this[key];

  if (value !== undefined || key in this || Object.isSealed(this)) {
    return value;
  } else {
    ObservationRecorder.add(this, key);
    return this[key];
  }
}

module.exports = function (Type) {
  return /*#__PURE__*/function (_Type, _Symbol$for, _Symbol$for2, _Symbol$for3, _Symbol$for4, _Symbol$for5, _Symbol$for6, _Symbol$for7, _Symbol$for8, _Symbol$for9, _Symbol$for10, _Symbol$for11, _Symbol$for12) {
    _inherits(_class, _Type);

    var _super = _createSuper(_class);

    function _class() {
      _classCallCheck(this, _class);

      return _super.apply(this, arguments);
    }

    _createClass(_class, [{
      key: "get",
      value: function get(prop) {
        if (prop) {
          return getKeyValue.call(this, prop);
        } else {
          return canReflect.unwrap(this, Map);
        }
      }
    }, {
      key: "set",
      value: function set(prop, value) {
        if (_typeof(prop) === "object") {
          //!steal-remove-start
          if (process.env.NODE_ENV !== 'production') {
            canLogDev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');
          } //!steal-remove-end


          if (value === true) {
            _updateDeep.call(this, prop);
          } else {
            _assignDeep.call(this, prop);
          }
        } else {
          setKeyValue.call(this, prop, value);
        }

        return this;
      }
    }, {
      key: "assignDeep",
      value: function assignDeep(prop) {
        _assignDeep.call(this, prop);

        return this;
      }
    }, {
      key: "updateDeep",
      value: function updateDeep(prop) {
        _updateDeep.call(this, prop);

        return this;
      }
    }, {
      key: "assign",
      value: function assign(prop) {
        _assign.call(this, prop);

        return this;
      }
    }, {
      key: "update",
      value: function update(prop) {
        _update.call(this, prop);

        return this;
      }
    }, {
      key: "serialize",
      value: function serialize() {
        return canReflect.serialize(this, Map);
      }
    }, {
      key: "deleteKey",
      value: function deleteKey() {
        return defineHelpers.deleteKey.apply(this, arguments);
      }
    }, {
      key: "forEach",
      value: function forEach(cb, thisarg, observe) {
        function forEach(list, cb, thisarg) {
          return canReflect.eachKey(list, cb, thisarg);
        }

        if (observe === false) {
          ObservationRecorder.ignore(forEach)(this, cb, thisarg);
        } else {
          return forEach(this, cb, thisarg);
        }
      }
    }, {
      key: _Symbol$for2,
      get: function get() {
        return true;
      }
    }, {
      key: _Symbol$for3,
      get: function get() {
        return false;
      }
    }, {
      key: _Symbol$for4,
      get: function get() {
        return false;
      }
    }, {
      key: _Symbol$for5,
      value: function value() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return getKeyValue.apply(this, args);
      }
    }, {
      key: _Symbol$for6,
      value: function value() {
        var _defineHelpers$delete;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return (_defineHelpers$delete = defineHelpers.deleteKey).call.apply(_defineHelpers$delete, [this].concat(args));
      }
    }, {
      key: _Symbol$for7,
      value: function value() {
        var keys = canReflect.getOwnEnumerableKeys(this);

        if (this._computed) {
          var computedKeys = canReflect.getOwnKeys(this._computed);
          var key;

          for (var i = 0; i < computedKeys.length; i++) {
            key = computedKeys[i];

            if (keys.indexOf(key) < 0) {
              keys.push(key);
            }
          }
        }

        return keys;
      }
    }, {
      key: _Symbol$for8,
      value: function value() {
        ObservationRecorder.add(this, 'can.keys');
        ObservationRecorder.add(Object.getPrototypeOf(this), 'can.keys');
        return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
      }
    }, {
      key: _Symbol$for9,
      value: function value() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return defineHelpers.reflectSerialize.apply(this, args);
      }
    }, {
      key: _Symbol$for10,
      value: function value() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return defineHelpers.reflectUnwrap.apply(this, args);
      }
    }, {
      key: _Symbol$for11,
      value: function value(key) {
        return key in this._define.definitions || this._instanceDefinitions !== undefined && key in this._instanceDefinitions;
      }
    }, {
      key: _Symbol$for12,
      value: function value() {
        return this.updateDeep.apply(this, arguments);
      }
    }], [{
      key: getSchemaSymbol,
      value: function value() {
        hooks.finalizeClass(this);
        var def = this.prototype._define;
        var definitions = def ? def.definitions : {};
        var schema = {
          type: "map",
          identity: [],
          keys: {}
        };
        return updateSchemaKeys(schema, definitions);
      }
    }, {
      key: _Symbol$for,
      value: function value() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        return _construct(this, args);
      }
    }]);

    return _class;
  }(Type, Symbol.for("can.new"), Symbol.for("can.isMapLike"), Symbol.for("can.isListLike"), Symbol.for("can.isValueLike"), Symbol.for("can.getKeyValue"), Symbol.for("can.deleteKeyValue"), Symbol.for("can.getOwnKeys"), Symbol.for("can.getOwnEnumerableKeys"), Symbol.for("can.serialize"), Symbol.for("can.unwrap"), Symbol.for("can.hasKey"), Symbol.for("can.updateDeep"));
};