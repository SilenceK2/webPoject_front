{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8080/\",\n  withCredentials: true,\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n/**\r\n * 요청 인터셉터\r\n * 로컬 스토리지에 access_token이 없으면 요청 url을 /users/login으로 변경\r\n */\n// api.interceptors.request.use((config) => {\n//   if (!localStorage.getItem(\"memberIdNumber\")) {\n//     alert(\"로그인을 진행해주세요\");\n//     window.location.href = \"/login\";\n//   }\n//   return config;\n// });\n\n/**\r\n * 응답 인터셉터\r\n * refresh token을 사용하여 새로운 access token을 요청 재시도 (클라이언트에는 refresh_token 저장 x)\r\n */\n// api.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async (error) => {\n//     if (error.response.status === 401) {\n//       try {\n//         const response = await api.post(\"/refresh_token\");\n//         const accessToken = response.data.access_token;\n//         error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n//         return axios.request(error.config);\n//       } catch (error) {\n//         console.error(\"refresh_token없음:\", error);\n//         localStorage.removeItem(\"access_token\");\n//         window.location.href = \"/users/login\";\n//         return Promise.reject(error);\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\napi.defaults.timeout = 3000;\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","defaults","timeout"],"sources":["C:/Users/정재승/Desktop/202230233_03-01/webproject/Capston_front/src/utils/api/Instance.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:8080/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n/**\r\n * 요청 인터셉터\r\n * 로컬 스토리지에 access_token이 없으면 요청 url을 /users/login으로 변경\r\n */\r\n// api.interceptors.request.use((config) => {\r\n//   if (!localStorage.getItem(\"memberIdNumber\")) {\r\n//     alert(\"로그인을 진행해주세요\");\r\n//     window.location.href = \"/login\";\r\n//   }\r\n//   return config;\r\n// });\r\n\r\n/**\r\n * 응답 인터셉터\r\n * refresh token을 사용하여 새로운 access token을 요청 재시도 (클라이언트에는 refresh_token 저장 x)\r\n */\r\n// api.interceptors.response.use(\r\n//   (response) => {\r\n//     return response;\r\n//   },\r\n//   async (error) => {\r\n//     if (error.response.status === 401) {\r\n//       try {\r\n//         const response = await api.post(\"/refresh_token\");\r\n//         const accessToken = response.data.access_token;\r\n//         error.config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//         return axios.request(error.config);\r\n//       } catch (error) {\r\n//         console.error(\"refresh_token없음:\", error);\r\n//         localStorage.removeItem(\"access_token\");\r\n//         window.location.href = \"/users/login\";\r\n//         return Promise.reject(error);\r\n//       }\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\napi.defaults.timeout = 3000;\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,wBAAwB;EACjCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,6BAA6B,EAAE,GAAG;IAClC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,GAAG,CAACK,QAAQ,CAACC,OAAO,GAAG,IAAI;AAC3B,eAAeN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}