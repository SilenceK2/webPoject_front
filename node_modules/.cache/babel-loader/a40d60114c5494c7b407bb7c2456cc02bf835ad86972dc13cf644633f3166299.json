{"ast":null,"code":"import api from \"../api/Instance\";\n\n/**\r\n * 유저 로그인 axios\r\n * @param {*} email\r\n * @param {*} pwd\r\n * @returns\r\n */\n\nexport const loginGetMeberId = async () => {\n  try {\n    const response = await api.get(\"/member/getmemberid\");\n    const result = response.data.memberid;\n    console.log(result);\n    const memberId = response.data.memberid;\n    localStorage.setItem(\"memberIdNumber\", memberId);\n    console.log(response.data);\n    return {\n      success: true,\n      result\n    };\n  } catch (error) {\n    console.error(\"error:\", error);\n    return {\n      success: false,\n      error: \"실패\"\n    };\n  }\n};\nexport const loginUser = async (email, pwd) => {\n  try {\n    const response = await api.post(\"/member/login\", {\n      memberEmail: email,\n      memberPassword: pwd\n    });\n    if (response.data.success) {\n      return {\n        success: true\n      };\n    } else {\n      return {\n        success: false\n      };\n    }\n  } catch (error) {\n    console.error(\"error:\", error);\n    return {\n      success: false,\n      error: \"요청 실패\"\n    };\n  }\n};\n/**\r\n * 유저 중복가입방지 axios\r\n * @param {*} signupEmail\r\n * @returns success\r\n */\nexport const signupVerify = async email => {\n  try {\n    const response = await api.post(\"/member/verify\", {\n      memberEmail: email\n    });\n    if (response.data.success) {\n      return {\n        success: true,\n        message: \"사용하실 수 있는 이메일입니다.\"\n      };\n    } else {\n      return {\n        success: false\n      };\n    }\n  } catch (error) {\n    console.error(\"error:\", error);\n    return {\n      success: false,\n      error: \"요청 실패\"\n    };\n  }\n};\n\n/**\r\n * 유저 회원가입 axios\r\n * @param {*} signupEmail\r\n * @param {*} signupPwd\r\n * @returns success\r\n */\nexport const signupUser = async (email, pwd, name) => {\n  try {\n    const response = await api.post(\"/member/save\", {\n      memberEmail: email,\n      memberPassword: pwd,\n      memberName: name\n    });\n    console.log(email, pwd);\n    if (response.data.success) {\n      return {\n        success: true,\n        message: \"회원가입 성공\"\n      };\n    } else {\n      return {\n        success: false\n      };\n    }\n  } catch (error) {\n    console.error(\"error:\", error);\n    return {\n      success: false,\n      error: \"요청 실패\"\n    };\n  }\n};","map":{"version":3,"names":["api","loginGetMeberId","response","get","result","data","memberid","console","log","memberId","localStorage","setItem","success","error","loginUser","email","pwd","post","memberEmail","memberPassword","signupVerify","message","signupUser","name","memberName"],"sources":["C:/Users/정재승/Desktop/202230233_03-01/webproject/Capston_front/src/utils/apimodule/member.jsx"],"sourcesContent":["import api from \"../api/Instance\";\r\n\r\n/**\r\n * 유저 로그인 axios\r\n * @param {*} email\r\n * @param {*} pwd\r\n * @returns\r\n */\r\n\r\nexport const loginGetMeberId = async () => {\r\n  try {\r\n    const response = await api.get(\"/member/getmemberid\");\r\n    const result = response.data.memberid;\r\n    console.log(result);\r\n    const memberId = response.data.memberid;\r\n    localStorage.setItem(\"memberIdNumber\", memberId);\r\n    console.log(response.data);\r\n    return { success: true, result };\r\n  } catch (error) {\r\n    console.error(\"error:\", error);\r\n    return { success: false, error: \"실패\" };\r\n  }\r\n};\r\nexport const loginUser = async (email, pwd) => {\r\n  try {\r\n    const response = await api.post(\"/member/login\", {\r\n      memberEmail: email,\r\n      memberPassword: pwd,\r\n    });\r\n\r\n    if (response.data.success) {\r\n      return { success: true };\r\n    } else {\r\n      return { success: false };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"error:\", error);\r\n    return { success: false, error: \"요청 실패\" };\r\n  }\r\n};\r\n/**\r\n * 유저 중복가입방지 axios\r\n * @param {*} signupEmail\r\n * @returns success\r\n */\r\nexport const signupVerify = async (email) => {\r\n  try {\r\n    const response = await api.post(\"/member/verify\", {\r\n      memberEmail: email,\r\n    });\r\n\r\n    if (response.data.success) {\r\n      return { success: true, message: \"사용하실 수 있는 이메일입니다.\" };\r\n    } else {\r\n      return { success: false };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"error:\", error);\r\n    return { success: false, error: \"요청 실패\" };\r\n  }\r\n};\r\n\r\n/**\r\n * 유저 회원가입 axios\r\n * @param {*} signupEmail\r\n * @param {*} signupPwd\r\n * @returns success\r\n */\r\nexport const signupUser = async (email, pwd, name) => {\r\n  try {\r\n    const response = await api.post(\"/member/save\", {\r\n      memberEmail: email,\r\n      memberPassword: pwd,\r\n      memberName: name,\r\n    });\r\n\r\n    console.log(email, pwd);\r\n\r\n    if (response.data.success) {\r\n      return { success: true, message: \"회원가입 성공\" };\r\n    } else {\r\n      return { success: false };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"error:\", error);\r\n    return { success: false, error: \"요청 실패\" };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}